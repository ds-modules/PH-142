#Read in the first dataset
BlackWhite_results <- read.csv("./Data/BlackWhite_results.csv")
#Read in the first dataset
BlackWhite_results <- read.csv("../Data/BlackWhite_results.csv")
#Here is some data on global cesarean delivery rates
CS.data <- read.csv("../Data/Cesarean.csv")
#Here is some data on global cesarean delivery rates
CS.data <- read.csv("../Data/Cesarean.csv")
CS.data <- CS.data %>% rename(gdp.2006 = X2006)
CS.data <- CS.data %>% mutate(CS_Rate = CS_Rate2*100)
#Drop two of the country variables and keep the third. Use View() to look at the values and choose the best variable to keep
#Also drop the old CS_Rate2 variable
CS.data <- CS.data %>% select(-Country.y, -Country.x, CS_Rate2)
#The very basics
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point()
#much better!
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(col = Region)) +
scale_x_log10()
#where should size of the points come in?
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(col = Region, size = Births_Per_1000)) +
scale_x_log10()
#I want the points to all be BIGGER! You can adjust the max point size using scale_size_area(max_size = ##)
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(col = Region, size = Births_Per_1000)) +
scale_x_log10() +
scale_size_area(max_size = 20)
#oh boy, the legend is massive -- let's remove it. And some points are overlapping -- you can make the points semi-transparent
#by setting the alpha parameter to a value between 0 and 1:
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(col = Region, size = Births_Per_1000, alpha = 0.5)) +
scale_x_log10() +
scale_size_area(max_size = 50, guide = "none")
#which country is which?
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(col = Region, size = Births_Per_1000, alpha = 0.5)) +
scale_x_log10() +
scale_size_area(max_size = 50, guide = "none") +
geom_text(aes(label = Country_Name))
#too many labels. Let's use an ifelse() statement to selectively display labels for a certain set of countries
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(col = Region, size = Births_Per_1000, alpha = 0.5)) +
scale_x_log10() +
scale_size_area(max_size = 50, guide = "none") +
geom_text(aes(label = ifelse(Region == "North America", as.character(Country_Name), "")))
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(col = Region, size = Births_Per_1000, alpha = 0.5)) +
scale_x_log10() +
scale_size_area(max_size = 50, guide = "none") +
geom_text(aes(label = ifelse(Births_Per_1000 > 1000, as.character(Country_Name), "")))
#some more style changes: add axis labels, change the theme
ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(col = Region, size = Births_Per_1000, alpha = 0.5)) +
scale_x_log10() +
scale_size_area(max_size = 50, guide = "none") +
scale_alpha_continuous(guide = "none") +
geom_text(aes(label = ifelse(Births_Per_1000 > 1000, as.character(Country_Name), ""))) +
xlab("GDP") + ylab("Cesarean delivery rate (%)") + theme_minimal()
#changes the format of the x axis labels:
cs.plot <- ggplot(data = CS.data, aes(x = gdp.2006, y = CS_Rate)) +
geom_point(aes(fill = Region, size = Births_Per_1000, alpha = 0.5), col = "black", shape = 21) +
scale_x_log10(breaks = c(1, 100, 1000, 10000), labels = c(1, 100, 1000, 10000)) +
scale_size_area(max_size = 50, guide = "none") +
scale_alpha_continuous(guide = "none") +
geom_text(aes(label = ifelse(Births_Per_1000 > 700, as.character(Country_Name), ""))) +
xlab("GDP") + ylab("Cesarean delivery rate (%)") + theme_minimal()
cs.plot %>% ggplotly()
######################################################################################################
######################################################################################################
#What else did we learn:
######################################################################################################
#What else did we learn:
#dplyr functions rename() to change variable names, and mutate() to add new variables based on existing variables
######################################################################################################
#What else did we learn:
#dplyr functions rename() to change variable names, and mutate() to add new variables based on existing variables
#alpha() to control transparency, shape() to change shape of geom_point()
######################################################################################################
#What else did we learn:
#dplyr functions rename() to change variable names, and mutate() to add new variables based on existing variables
#alpha() to control transparency, shape() to change shape of geom_point()
#scale_x_log10() to use a log-transformed x-axis
######################################################################################################
#What else did we learn:
#dplyr functions rename() to change variable names, and mutate() to add new variables based on existing variables
#alpha() to control transparency, shape() to change shape of geom_point()
#scale_x_log10() to use a log-transformed x-axis
#geom_text() to add labels to the plot
#Really useful resources for learning ggplot2 and dplyr:
#Really useful resources for learning ggplot2 and dplyr:
#ggplot2 cheatsheet: https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf
